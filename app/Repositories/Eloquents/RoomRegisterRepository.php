<?php

namespace App\Repositories\Eloquents;

use App\Models\RoomRegister;
use App\Repositories\Base\BaseRepository;


use Carbon\Carbon;
use Illuminate\Pagination\Paginator;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\DB;


class RoomRegisterRepository extends BaseRepository {
    public function __construct(RoomRegister $model)
    {
        $this->model = $model;
    }
    public function getAll1($request)
    {
        //return parent::getAll(); // TODO: Change the autogenerated stub
        $raw_query =  DB::select(
            DB::raw("
                SELECT r.id as room_id , r.room_name, rr.date_check_in, rr.date_check_out,IF(rr.status is NULL,0,rr.status) as status,r.number_count,IF(rr.id is NULL,0,rr.id) as room_register_id
                FROM rooms as r 
                LEFT JOIN  room_register as rr ON  r.id = rr.id_room 
            ")
        );
        $raw_query = Collection::make($raw_query);
        $totalCount = $raw_query->count();
        $page = $request->input('page') ?:1;
        if ($page) {
            $skip = 2 * ($page - 1);
            $raw_query = $raw_query->splice($skip,2);
        } else {
            $raw_query = $raw_query->splice(0,2);
        }
        $path = $request->url();
        $paginator = new \Illuminate\Pagination\LengthAwarePaginator($raw_query, $totalCount, 2, $page);
        $paginator = $paginator->withPath($path);
        return $paginator;
    }

    public function getDetailInfoRoomRegister ($idRoomRegister)
    {
        $raw_query =  DB::selectOne(
            DB::raw("
                SELECT r.id as room_id , r.room_name, rr.date_check_in, rr.date_check_out,IF(rr.status is NULL,0,rr.status) as status,r.number_count,IF(rr.id is NULL,0,rr.id) as room_register_id,rr.note,rr.id_room_price,rr.room_price_invoice,rr.service_invoice,rr.id as id
                FROM rooms as r 
                LEFT JOIN  room_register as rr ON  r.id = rr.id_room 
                WHERE rr.id = $idRoomRegister
            ")
        );

        //Add attribute
        $fromTime = Carbon::create($raw_query->date_check_in)->toTimeString();
        $toTime = Carbon::create($raw_query->date_check_out)->toTimeString();
        if($fromTime != '00:00:00' && $toTime != '00:00:00'){
            $raw_query->fromTime = $fromTime;
            $raw_query->toTime = $toTime;
        }
        $raw_query->date_check_in = (Carbon::create($raw_query->date_check_in))->toDateString();
        $raw_query->date_check_out = (Carbon::create($raw_query->date_check_out))->toDateString();
        return get_object_vars($raw_query);
    }

}
